-- 1 카테시안 프러덕트 발생 -> 모든 데이터 결과물을 출력한 다음 where절에 조건에 맞는 데이터만 추출
SELECT *
FROM employees e , departments d
WHERE e.department_id =d.department_id;

SELECT*
FROM departments LEFT OUTER JOIN employees -- JOIN할 때 해당 조건에 맞는 데이터만 가지고 와서 데이터 추출
ON (departments.department_id=employees.department_id) 
WHERE departments.department_id > 50;-- 부서번호가 50번 보다 큰 부서에 대해서만 데이터 추출

--JOIN 과 on 은 한 세트
SELECT*
FROM employees e full OUTER JOIN departments d
ON e.department_id = d.department_id
WHERE e.department_id =d.department_id;

--OUTER JOIN
SELECT e.employee_id, e.last_name,
    e.department_id, d.department_name
FROM employees e full OUTER JOIN departments d
ON e.department_id = d.department_id;
--EQUI JOIN
SELECT e.employee_id, e.last_name,
    e.department_id, d.department_name
FROM employees e JOIN departments d
ON e.department_id = d.department_id;

SELECT e.employee_id, e.last_name,
    e.department_id, d.department_name
FROM employees e , departments d
WHERE e.department_id(+) = d.department_id;


SELECT e.employee_id, e.last_name, e.manager_id, m.last_name
FROM employees e JOIN employees m
ON (e.manager_id=m.employee_id);

SELECT e.employee_id, e.last_name, e.manager_id, m.last_name
FROM employees e RIGHT OUTER JOIN employees m
ON (e.manager_id=m.employee_id);


--cross join
SELECT last_name, department_name
FROM employees CROSS JOIN departments;

--natural join
SELECT *
from departments;

SELECT *
FROM locations;

SELECT department_id, department_name, location_id, city
FROM departments NATURAL JOIN locations;

SELECT employee_id, department_name, location_id, last_name
FROM employees NATURAL JOIN departments;

--USING 절
SELECT employee_id, department_name, location_id, last_name
FROM employees  JOIN departments
--employees.dempartment_id= departments.department_id
USING (department_id);


--on 절
SELECT employee_id, location_id, last_name , employees.department_id
FROM employees  JOIN departments
ON (employees.department_id=departments.department_id);

--테이블 이름 별칭 사용
SELECT employee_id, location_id, last_name , e.department_id
FROM employees e JOIN departments d
ON (employees.department_id=departments.department_id);



--3 way join
--EQI join
SELECT e.employee_id, e.last_name, d.department_id, l.city
FROM employees e FULL OUTER join departments d ON(e.department_id=d.department_id)
                FULL outer join locations l ON(d.location_id = l.location_id);
                
                
--join 과 group 함수의 콜라보

SELECT d.department_name, MIN(e.salary), MAX(e.salary), TRUNC(AVG(e.salary))
FROM employees e JOIN departments d
ON(e.department_id = d.department_id)
GROUP BY d.department_name;

SELECT d.department_name, MIN(e.salary), MAX(e.salary), TRUNC(AVG(e.salary))
FROM employees e JOIN departments d
ON(e.department_id = d.department_id)
GROUP BY d.department_name;


--SUBQUERY
--'abel'인 사람의 급여보다 많은 사람의 사원 정보를 출력하세요.
SELECT salary
FROM employees
WHERE last_name = 'Abel';

SELECT*
FROM employees
WHERE salary > 11000;


SELECT*
FROM employees
WHERE salary > (SELECT salary
                FROM employees
                WHERE last_name = 'Abel'
                );


--조건이 두개일때                
-- Matos 인 사람의 직책과 같고 연보이 높은 사람의 정보를 츌력하시오
SELECT job_id
FROM employees
WHERE last_name = 'Matos';

SELECT salary
FROM employees
WHERE last_name ='Matos';



SELECT last_name ,job_id,salary
fROM employees
WHerE job_id =(SELECT job_id
              FROM employees
                WHERE last_name = 'Matos')
AND salary>(SELECT salary
            FROM employees
            WHERE last_name ='Matos');
            
--회사에서 급여가 제일 높은 사람의 정보 출력            
            
SELECT last_name, department_id, salary
FROM employees
WHERE salary = (Select max(salary)
                FROM employees);
                
                
--20번 부서에 있는 인원보다 많은 부서의 정보를 출ㄹ력
SELECT COUNT(*)
FROM employees
WHERE department_id =20;

SELECT department_id, count(*)
from employees
GROUP BY department_id
HAVING count(*)>(SELECT COUNT(*)
                FROM employees
                WHERE department_id =20);


--60번 부서에서 최고 급여와 같은 급여를 받는 사람의 정보 출려
SELECT max(salary)
FROM employees
WHERE department_id=60;

SELECT last_name, department_id, salary
FROM employees
WHERE salary = (SELECT max(salary)
                FROM employees
                WHERE department_id=60
                );


--오류
SELECT *
FROM employees
WHERE salary =( SELECT salary+100
                FROM employees);
                
--부서별 최고 급여를 받는 사람과 같은 급여를 받는 사람의 정보를 출력
SELECT MAX(salary)
FROM employees
GROUP BY department_id;

SELECT last_name, job_id, salary
FROM employees
WHERE salary in( SELECT MAX(salary)
                FROM employees
                GROUP BY department_id);

--ANY
--60번 부서의 구성원의 급여보다 많은 사람들의 정보 출력
SELECT salary 
FROM employees
WHERE department_id =60;


SELECT last_name ,job_id, salary
FROM employees
WHERE salary =all (SELECT salary 
                    FROM employees
                    WHERE department_id =60);
                    
                    
                    
SELECT salary, NVL(commission_pct,-1)
FROM employees
WHERE department_id =10;


SELECT last_name, salary, commission_pct, department_id
FROM employees
WHERE (salary, NVL(commission_pct,-1)) IN(SELECT salary, NVL(commission_pct,-1)
                                        FROM employees
                                        WHERE department_id =60)
                                        AND department_id<>60;
                                        
--비쌍비교

SELECT last_name, salary, commission_pct, department_id
FROM employees
WHERE salary IN(SELECT salary
            FROM employees
             WHERE department_id =60)
             
AND NVL(commission_pct,-1)IN(SELECT NVL(commission_pct,-1)
            FROM employees
             WHERE department_id =60)
AND department_id<>60;


--주의사항
SELECT last_name, job_id, salary
FROm employees
WHERE salary> (SELECT salary
                FROM employees
                WHERE last_name='Mark'
                );
                
SELECT employee_id, last_name
FROm employees
WHERE employee_id In( SELECT manager_id
                        FROM employees
                        );


SELECT employee_id, last_name
FROm employees
WHERE employee_id NOT In( SELECT manager_id
                        FROM employees
                        );
---------------------------------------------------------------------------------------------------------------------
-- Chapter 07 ) 조인


--1. LOCATIONS 및 COUNTRIES 테이블을 사용하여 HR 부서를 위해 모든 부서의 주소를 생성하는 query를 작성하시
--오. 출력에 위치 ID, 주소, 구/군, 시/도 및 국가를 표시하며, NATURAL JOIN을 사용하여 결과를 생성합니다.
SELECT*
FROM locations;
SELECT*
FROM COUNTRIES;
SELECT location_id, street_address,city, state_province, country_name
FROM locations Natural JOIN countries;


2. 모든 사원의 성, 소속 부서번호 및 부서 이름을 표시하는 query를 작성하시오.
SELECT first_name,department_name
FROM employees  JOIN departments
USING(department_id);

--3. Toronto에 근무하는 사원에 대한 보고서를 필요로 합니다. toronto에서 근무하는 모든 사원의 성, 직무, 부서0
--번호 및 부서 이름을 표시하시오. (힌트 : 3-way join 사용)
SELECT  e.last_name, e.job_id, e.department_id, d.department_name
FROM employees e join departments d 
ON(e.department_id=d.department_id)
JOIN locations l
ON(d.location_id =l.location_id)
where l.city = 'Toronto';

4. 사원의 성 및 사원 번호를 해당 관리자의 성 및 관리자 번호와 함께 표시하는 보고서를 작성하는데, 열 레이블을
각각 Employee, Emp#, Manager 및 Mgr#으로 지정하시오.
SELECT*
FROM employees e join employees m
ON(e.manager_id =m.employee_id);




5. King과 같이 해당 관리자가 지정되지 않은 모든 사원을 표시하도록 4번 문장을 수정합니다. 사원 번호순으로 결
과를 정렬하시오. 


SELECT*
FROM employees e LEFT outer join employees m
ON(e.manager_id =m.employee_id)
ORder BY e.employee_id;

6. 사원의 성과 부서 번호 및 주어진 사원과 동일한 부서에 근무하는 모든 사원을 표시하는 보고서를 작성하시오. 각
열에 적절한 레이블을 자유롭게 지정해 봅니다.
SELECT*
FROM emploeeys e jodin employees m
on(e.departmenti= d m.department_id)
where e.employee_id where e.employee_id <> m.emplo


-- Chapter 08 ) 서브쿼리

1. Zlotkey와 동일한 부서에 속한 모든 사원의 이름과 입사일을 표시하는 질의를 작성하시오. Zlotkey는 결과에서
제외하시오.
SELECT last_name, hire_date,  department_id
FROM employees
where department_id in (select department_id
                        FROM employees
                        where last_name = 'Zlotkey')
                      and last_name <>  'Zlotkey' ;


2. 급여가 평균 급여보다 많은 모든 사원의 사원 번호와 이름을 표시하는 질의를 작성하고 결과를 급여에 대해 오름
차순으로 정렬하시오.
SELECT employee_id, last_name
FROM employees
WHERE salary > (SELECT AVG(salary)
                      FROM employees)
ORDER by salary;


3. 이름에 u가 포함된 사원과 같은 부서에서 일하는 모든 사원의 사원 번호와 이름을 표시하는 질의를 작성하고 질의
를 실행하시오.
SELECT employee_id, first_name
FROM employees
WHERE first_name in ( SELECT first_name
                        FROM employees
                        WHERE first_name Like '%u%');


4. 부서 위치 ID가 1700인 모든 사원의 이름, 부서 번호 및 업무 ID를 표시하시오.
SELECT first_name,department_id, job_id
FROM employees
WHERE department_id in( SELECT department_id
                        FROM departments
                        WHERE location_id =1700);


5. King에게 보고하는(manager가 King) 모든 사원의 이름과 급여를 표시하시오.
SELECT last_name, salary
FROM employees
WHERE manager_id =(SELECT employee_id
                    FROM employees
                    WHERE last_name='King');
                    



6. Executive 부서의 모든 사원에 대한 부서 번호, 이름 및 업무 ID를 표시하시오.
SELECT department_id, last_name, job_id
FROM employees
WHERE department_id in (select department_id
                        FROM departments
                        where department_name ='Executive');


7. 평균 급여보다 많은 급여를 받고 이름에 u가 포함된 사원과 같은 부서에서 근무하는 모든 사원의 사원 번호, 이름
및 급여를 표시하시오.
SELECT employee_id, last_name, salary
FROM employees
WHERE department_id IN(SELECT department_id
                       FROM employees
                      WHere last_name LIKE'%u%')
 and
            salary > (SELECT AVG(salary)
                      FROM employees
                         );